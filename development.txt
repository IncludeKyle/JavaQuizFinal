The 10 general categories:
- Arrays
- Inheritance 
- Interface dependent Polymorphism 
- Software development (JAR packaging and exception handling)
- Regex
- I/O & object serialization 
- Lambdas
- Generic classes & methods 
- Recursion
- Concurrency

Itemization of team member responsibilities in the project:

==================================================================================================
 Phase 2: Start working on pulling the master copy and work on your assigned piece of the project
==================================================================================================

Thanh - [Interface][Regex][File IO: Input] You have contributed enough to satisfy 3 goal areas and your classes 
          are now the core of the project! That's more than enough for now, please check emails in the event any 
          of us need help with how an area of your code works, thanks for your generous contribution!
        
Mackenzie - [Generics] Make a generic method to satisfy the generic method requirement, it can belong to any class 
              in the project.

Paul - [Abstract class][Lambda][Interface] 
         > Make an abstract class with static methods that can be extended by the TestAndAnalyze class to help with 
         displaying a good looking text based UI and processing test score data. 
         Add a lambda to the QuestionParser class.(Done)
       
Kyle - [Inheritance][Arrays][Recursion]
         > Make a class TestAndAnalyze that is instantiated as an object in the QuestionParser class whenever 
         the runTest() method is called.(Done)
         > Use arrays to work with the chapter and section test score data. 
         > Make a printLine method that works recursively to print a custom length line of any character.
       
Brandon - [Concurrency] The FileIO needs to be multi-threaded for when we read from the questionBank.txt and the 
            write to the resultOfTest.txt file. 

Charles - [FileIO: Output][Exceptions] Work with Brady to make a class that can be instantiated in the TestAndAnalyze class to
            report the final test results to a text file. It should have a method that can receive a string array and
            print every line from it to a file. Handle FileIO exceptions.

Brady - [FileIO: Output][Exceptions] Work with Charles to make a class that can be instantiated in the TestAndAnalyze class to
          report the final test results to a text file. It should have a method that can receive a string array and
          print every line from it to file. Handle FileIO exceptions.

====================================
 Phase 1: Create 100 test questions
====================================
Chapter 7 - Arrays:
  LagoonNebula1(done)
  
Chapter 9 - Inheritance:
  Thanh(done)
  
Chapter 10 - Interface Dependent Polymorphism:
  Brandon <------------------------------------------------(not done!)
  
PDF on D2L - Software Development (JAR package):
  BTOlson <------------------------------------------------(not done!)

Chapter 14 - Regex (Strings):
  IncludeKyle (done)
  
Chapter 15 - I/O & Object Serialization 
  Mackbra (5x)(done)
  BTOlson (5x) <------------------------------------------------(not done!)
  
Chapter 17 - Lambdas
  LagoonNebula1 (5x) <------------------------------------------------(not done!)
  IncludeKyle   (done)
  
Chapter 16 - Generic Classes & Methods 
  Paulegbe (done)
  
Chapter 18 - Recursion
  Mackbra(done)
  
Chapter 23 - Concurrency
  Paulegbe (5x)(done)
  Brandon  (5x) <------------------------------------------------(not done!)
